generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN    @map("admin")
  CUSTOMER @map("customer")

  @@map("roles")
}

enum Status {
  PENDING  @map("pending")
  ACTIVE   @map("active")
  INACTIVE @map("inactive")

  @@map("statuses")
}

enum PostStatus {
  DRAFT
  SCHEDULED
  PUBLISHED
  FAILED
  DELETED

  @@map("post_statuses")
}

enum MediaType {
  IMAGE
  VIDEO
  GIF

  @@map("media_types")
}

enum DeviceType {
  WEB
  IOS
  ANDROID
  DESKTOP

  @@map("device_types")
}

enum NotificationCategory {
  GENERIC
  ONBOARDING
  ENGAGEMENT
  REMINDER
  ANALYTICS
}

enum NotificationStatus {
  DRAFT
  SCHEDULED
  PUBLISHED

  @@map("notification_statuses")
}

model PushSubscription {
  id       String  @id @default(cuid())
  endpoint String  @unique
  p256dh   String
  auth     String
  group    String?

  createdAt             DateTime?               @default(now()) @map("created_at")
  updatedAt             DateTime?               @updatedAt @map("updated_at")
  NotificationRecipient NotificationRecipient[]

  @@map("push_subscriptions")
}

model Tenant {
  id   String @id @default(cuid())
  name String @unique
  slug String @unique

  createdAt DateTime? @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")

  @@map("tenants")
}

model Tweet {
  id        String @id @default(cuid())
  content   String @unique
  twitterId String @unique @map("twitter_id")

  createdAt DateTime? @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")

  @@map("tweets")
}

// Necessary for Next auth
model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? // @db.Text
  access_token             String? // @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String? // @db.Text
  session_state            String?
  user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  refresh_token_expires_in Int?

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String    @id @default(cuid())
  firstName     String?   @map("first_name")
  lastName      String?   @map("last_name")
  email         String?   @unique
  emailVerified DateTime?
  status        Status    @default(PENDING)
  password      String
  image         String?
  accounts      Account[]
  sessions      Session[]
  posts         Post[]

  createdAt DateTime? @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")

  @@index([firstName, lastName])
  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Post {
  id            String         @id @default(uuid())
  user          User           @relation(fields: [userId], references: [id])
  userId        String         @map("user_id")
  title         String?
  content       String?
  link          String?
  status        PostStatus     @default(DRAFT) // Draft, Scheduled, etc.
  scheduledAt   DateTime?      @map("scheduled_at") @db.Timestamp(6)
  isPublished   Boolean?       @default(false) @map("is_published")
  publishedAt   DateTime?      @map("published_at") @db.Timestamp(6)
  platformPosts PlatformPost[] // One per platform
  media         Media[]

  createdAt DateTime? @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")

  @@map("posts")
}

model Platform {
  id        String         @id @default(uuid())
  name      String         @unique
  posts     PlatformPost[]
  createdAt DateTime       @default(now())

  @@map("platforms")
}

model PlatformPost {
  id             String     @id @default(uuid())
  post           Post       @relation(fields: [postId], references: [id])
  postId         String
  platform       Platform   @relation(fields: [platformId], references: [id])
  platformId     String
  platformPostId String? // ID returned from the platform (e.g. tweet ID)
  status         PostStatus @default(SCHEDULED) // Independent of parent post
  scheduledAt    DateTime?
  publishedAt    DateTime?
  errorMessage   String? // If failed
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt

  @@map("platform_posts")
}

model Media {
  id        String    @id @default(uuid())
  url       String
  type      MediaType
  post      Post      @relation(fields: [postId], references: [id])
  postId    String
  createdAt DateTime  @default(now())

  @@map("media")
}

model NotificationTemplate {
  id        String               @id @default(uuid())
  code      String               @unique
  title     String
  body      String
  data      Json?
  category  NotificationCategory @default(GENERIC)
  createdAt DateTime             @default(now())
  updatedAt DateTime             @updatedAt

  notifications Notification[]
}

model Notification {
  id          String                  @id @default(uuid())
  title       String
  body        String
  icon        String?
  imageUrl    String?
  data        Json?
  status      NotificationStatus @default(DRAFT)
  sentAt      DateTime?
  scheduledAt DateTime?
  template    NotificationTemplate?   @relation(fields: [templateId], references: [id])
  templateId  String?
  recipients  NotificationRecipient[]

  createdAt DateTime? @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")

  @@map("notifications")
}

model NotificationRecipient {
  id             String           @id @default(uuid())
  notification   Notification     @relation(fields: [notificationId], references: [id])
  notificationId String
  subscriber     PushSubscription @relation(fields: [subscriberId], references: [id])
  subscriberId   String
  deliveredAt    DateTime?
  readAt         DateTime?

  @@map("notification_recipients")
}
